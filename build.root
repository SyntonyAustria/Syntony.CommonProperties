<?xml version="1.0" encoding="utf-8"?>

<!--
**********************************************************************************************************************************************
build.root
**********************************************************************************************************************************************
WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright © Ing. Josef Hahnl, MBA - HahnlJosef@msn.com           All rights reserved.
**********************************************************************************************************************************************
Function: identify the "CommonProperties" directory for a project 
**********************************************************************************************************************************************
Imported by:    'Directory.Build.props'
    Imports:    'Company.props' from $(SdkBuildScriptsDirectory) (throws error if not exists)
    Imports:    'Company.props' from $(ProjectBuildScriptsDirectory) (if exists)
    Imports:    'BeforeCommon.props' from $(ProjectBuildScriptsDirectory) (if exists)
    Imports:    '$(_DefaultSdkImportPreFilename)DefaultItems.props' from $(SdkBuildScriptsDirectory) (throws error if not exists)
**********************************************************************************************************************************************
Properties defined
    IsBuildRootFileImported               ... 'true'
    BuildRootDirectory                      ... $(MSBuildThisFileDirectory) ... The directory portion of MSBuildThisFileFullPath. Include the final backslash in the path.
    BuildProjectDirectory                   ... $(MSBuildProjectDirectory) ... The absolute path of the directory where the project file is located. Include the final backslash in the path.
    BuildProjectPropertiesDirectory         ... $([MSBuild]::EnsureTrailingSlash($(BuildProjectDirectory)Properties)
    SolutionDrive                           ... $([System.IO.Path]::GetPathRoot($(MSBuildProjectDirectory))) like D
    SdkDirectoryName           ... 'CommonProperties' if not already set
    BuildScriptsDirectoryName               ... 'BuildScripts'
    BuildDirectoryName                      ... 'Build'
    BeforeCommonPropsName                   ... 'BeforeCommon.props'
    AfterCommonPropsName                    ... 'AfterCommon.props'
    ProjectBuildScriptsDirectory            ... the absolute path of the directory where we find the project specific build scripts. Include the final backslash in the path.
    SdkDirectory               ... the absolute path of the first found $(SdkDirectoryName) directory where the common tools and scripts are stored. Include the final backslash in the path.
    SdkBuildScriptsDirectory   ... the absolute path of the first found $(SdkDirectoryName) directory where we find the common build scripts. Include the final backslash in the path.
    _DefaultCompanyName                     ... 'Syntony'
    DefaultCompanyName                      ... 'Syntony'
    Syntony                                 ... 'false'
    Company                                 ... '$(DefaultCompanyName)'
**********************************************************************************************************************************************
-->

<Project>
    <PropertyGroup Label="Imported">
        <IsBuildRootFileImported>true</IsBuildRootFileImported>
    </PropertyGroup>

    <PropertyGroup Label="Directories">
        <!-- 
             The directory portion of MSBuildThisFileFullPath. Include the root drive and including the final backslash in the path.
             https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-reserved-and-well-known-properties?view=vs-2022
        -->
        <BuildRootDirectory>$([MSBuild]::EnsureTrailingSlash($(MSBuildThisFileDirectory)))</BuildRootDirectory>

        <!-- 
             The absolute path of the directory where the project file is located, for example C:\MyCompany\MyProduct\ including the final backslash in the path. 
             https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-reserved-and-well-known-properties?view=vs-2022
        -->
        <!-- if it is already set we assume it was only temporary -->
        <BuildProjectDirectory>$([MSBuild]::EnsureTrailingSlash($(MSBuildProjectDirectory)))</BuildProjectDirectory>

        <!-- make a fix Properties directory property with a trailing slash -->
        <BuildProjectPropertiesDirectory>$([MSBuild]::EnsureTrailingSlash($(BuildProjectDirectory)Properties))</BuildProjectPropertiesDirectory>
        <SolutionDrive>$([System.IO.Path]::GetPathRoot($(MSBuildProjectDirectory)))</SolutionDrive>

        <!-- define the common properties directory name and  the default build directory names where build scripts can be stored -->
        <SdkDirectoryName Condition="'$(SdkDirectoryName)' == ''">CommonProperties</SdkDirectoryName>
        <BuildScriptsDirectoryName Condition="'$(BuildScriptsDirectoryName)' == ''">BuildScripts</BuildScriptsDirectoryName>
        <BuildDirectoryName Condition="'$(BuildDirectoryName)' == ''">Build</BuildDirectoryName>
        <BeforeCommonPropsName>BeforeCommon.props</BeforeCommonPropsName>
        <AfterCommonPropsName>AfterCommon.props</AfterCommonPropsName>

        <!-- search for the project build directory, if any -->
        <_ProjectBuildDirectory Condition="'$(_ProjectBuildDirectory)' == '' OR !Exists('$(_ProjectBuildDirectory)')">$(BuildProjectDirectory)$(BuildScriptsDirectoryName)</_ProjectBuildDirectory>
        <_ProjectBuildDirectory Condition="!Exists('$(_ProjectBuildDirectory)') OR '$(_ProjectBuildDirectory)' == ''">$(BuildProjectDirectory)$(BuildDirectoryName)</_ProjectBuildDirectory>
        <_ProjectBuildDirectory Condition="!Exists('$(_ProjectBuildDirectory)') OR '$(_ProjectBuildDirectory)' == ''">$(BuildProjectDirectory).$(BuildDirectoryName)</_ProjectBuildDirectory>
        <_ProjectBuildDirectory Condition="!Exists('$(_ProjectBuildDirectory)') OR '$(_ProjectBuildDirectory)' == ''">$(BuildProjectDirectory)</_ProjectBuildDirectory>
        <ProjectBuildScriptsDirectory>$([MSBuild]::EnsureTrailingSlash($(_ProjectBuildDirectory)))</ProjectBuildScriptsDirectory>

        <!-- now we try to find the first common properties directory upside the $(BuildProjectDirectory) e.g.: D:\Syntony\Proj\Syntony\CommonProperties -->
        <_FirstSdkDirectory Condition="'$(_FirstSdkDirectory)' == '' OR !Exists('$(_FirstSdkDirectory)')">$(BuildProjectDirectory)$(SdkDirectoryName)</_FirstSdkDirectory>
        <_FirstSdkDirectory Condition="!Exists('$(_FirstSdkDirectory)') OR '$(_FirstSdkDirectory)' == ''">$(BuildProjectDirectory)..\$(SdkDirectoryName)</_FirstSdkDirectory>
        <_FirstSdkDirectory Condition="!Exists('$(_FirstSdkDirectory)') OR '$(_FirstSdkDirectory)' == ''">$(BuildProjectDirectory)..\..\$(SdkDirectoryName)</_FirstSdkDirectory>
        <_FirstSdkDirectory Condition="!Exists('$(_FirstSdkDirectory)') OR '$(_FirstSdkDirectory)' == ''">$(BuildProjectDirectory)..\..\..\$(SdkDirectoryName)</_FirstSdkDirectory>
        <_FirstSdkDirectory Condition="!Exists('$(_FirstSdkDirectory)') OR '$(_FirstSdkDirectory)' == ''">$(BuildProjectDirectory)..\..\..\..\$(SdkDirectoryName)</_FirstSdkDirectory>
        <_FirstSdkDirectory Condition="!Exists('$(_FirstSdkDirectory)') OR '$(_FirstSdkDirectory)' == ''">$(BuildProjectDirectory)..\..\..\..\..\$(SdkDirectoryName)</_FirstSdkDirectory>
        <_FirstSdkDirectory Condition="!Exists('$(_FirstSdkDirectory)') OR '$(_FirstSdkDirectory)' == ''">$(BuildProjectDirectory)..\..\..\..\..\..\$(SdkDirectoryName)</_FirstSdkDirectory>
        <_FirstSdkDirectory Condition="!Exists('$(_FirstSdkDirectory)') OR '$(_FirstSdkDirectory)' == ''">$(BuildProjectDirectory)..\..\..\..\..\..\..\$(SdkDirectoryName)</_FirstSdkDirectory>
    </PropertyGroup>

    <PropertyGroup Condition="Exists('$(_FirstSdkDirectory)')">
        <SdkDirectory>$([MSBuild]::NormalizePath('$(_FirstSdkDirectory)'))</SdkDirectory>
        <SdkDirectory>$([MSBuild]::EnsureTrailingSlash($(SdkDirectory)))</SdkDirectory>
        <SdkBuildScriptsDirectory>$([MSBuild]::NormalizePath('$(SdkDirectory)$(BuildScriptsDirectoryName)'))</SdkBuildScriptsDirectory>
        <SdkBuildScriptsDirectory Condition="!Exists('$(SdkBuildScriptsDirectory)')">$([MSBuild]::NormalizePath('$(SdkDirectory)$(BuildDirectoryName)'))</SdkBuildScriptsDirectory>
        <SdkBuildScriptsDirectory Condition="!Exists('$(SdkBuildScriptsDirectory)')">$([MSBuild]::NormalizePath('$(SdkDirectory).$(BuildDirectoryName)'))</SdkBuildScriptsDirectory>
        <SdkBuildScriptsDirectory Condition="'$(SdkBuildScriptsDirectory)' != ''">$([MSBuild]::EnsureTrailingSlash($(SdkBuildScriptsDirectory)))</SdkBuildScriptsDirectory>
    </PropertyGroup>

    <!-- this represents the name of the company that is developing with this SDK
         Using uppercase with underscores for spaces is the standard convention for environment variables, and it’s a good idea to keep them descriptive yet concise. 
         So, if this is for Syntony, COMPANY_NAME="Syntony" would work well.
    -->
    <PropertyGroup Label="Company Globals">
        <_DefaultCompanyName>$(COMPANY_NAME)</_DefaultCompanyName>
        <_DefaultCompanyName Condition="'$(_DefaultCompanyName)' == ''">Syntony</_DefaultCompanyName>
    </PropertyGroup>

    <!-- set the Company property to import the magic of our SDK implementation -->
    <Import Label="Company" Project="$(SdkBuildScriptsDirectory)Company.props" Condition="Exists('$(SdkBuildScriptsDirectory)Company.props')"/>
    <Import Label="Company" Project="$(ProjectBuildScriptsDirectory)Company.props" Condition="Exists('$(ProjectBuildScriptsDirectory)Company.props')"/>

    <PropertyGroup Label="Company Globals">
        <DefaultCompanyName Condition="'$(DefaultCompanyName)' == ''">$(_DefaultCompanyName)</DefaultCompanyName>
        <Company Condition="'$(Company)' == ''">$(DefaultCompanyName)</Company>
        <Syntony Condition="'$(Company)' == '$(_DefaultCompanyName)'">true</Syntony>
    </PropertyGroup>

    <PropertyGroup Label="Set SDK name">
        <_DefaultSdkImportPreFilename>$(Company).Sdk.</_DefaultSdkImportPreFilename>
        <_DefaultImportFilename>$(_DefaultSdkImportPreFilename)DefaultItems.props</_DefaultImportFilename>
        <_ImportCommonPropertiesDefaultSettingsFile>$(SdkBuildScriptsDirectory)$(_DefaultImportFilename)</_ImportCommonPropertiesDefaultSettingsFile>
    </PropertyGroup>

    <PropertyGroup Condition="Exists('$(_ProjectBuildDirectory)')">
        <_ImportProjectBeforeCommonPropsFile Condition="'$(_ImportProjectBeforeCommonPropsFile)' == '' OR !Exists('$(_ImportProjectBeforeCommonPropsFile)')">$(ProjectBuildScriptsDirectory)$(BeforeCommonPropsName)</_ImportProjectBeforeCommonPropsFile>
    </PropertyGroup>

    <!-- IMPORT BeforeCommon.props in the found PROJECT build-scripts directory -->
    <Import Project="$(_ImportProjectBeforeCommonPropsFile)" Condition="Exists('$(_ImportProjectBeforeCommonPropsFile)') AND '$(IsProjectDefaultSettingsPropsFileImported)' != 'true'" />

    <!-- IMPORT Default.Settings.props in the found CommonProperties build-scripts directory throws an error if not found -->
    <Import Label="$(Company).Sdk.DefaultItems.props" Project="$(_ImportCommonPropertiesDefaultSettingsFile)" Condition="'$(IsDefaultItemsPropsFileImported)' != 'true'" />

</Project>
