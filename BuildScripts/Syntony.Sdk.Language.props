<?xml version="1.0" encoding="utf-8"?>

<!--
***********************************************************************************************************************************************************************
Syntony.Sdk.LanguageSettings.props
***********************************************************************************************************************************************************************
WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright Â© Ing. Josef Hahnl, MBA - HahnlJosef@msn.com           All rights reserved.
***********************************************************************************************************************************************************************
Function: set properties and directories for C# language compilation
***********************************************************************************************************************************************************************
Imported by:    '$(BuildRootName)' => build.root
    Imported by:    'Syntony.Sdk.DefaultItems.props'
        Imported by:    'Syntony.Sdk.ProjectEnvironment.props'
***********************************************************************************************************************************************************************
Properties defined
    IsLanguagePropsFileImported                      ... 'true'
    SyntonyDefaultTargetFramework               ... 'net8.0'
    EnablePreviewFeatures                       ... 'true'
    LangVersion                                 ... 'preview'
    Nullable                                    ... 'enable'
    ImplicitUsings                              ... 'false'
    Deterministic                               ... 'true'
    EmbeddedResourceUseDependentUponConvention  ... 'false'
    AutoGenerateBindingRedirects                ... 'true'
    GenerateBindingRedirectsOutputType          ... 'true'
    RunAnalyzersDuringBuild                     ... 'true'
    RunAnalyzersDuringLiveAnalysis              ... 'true'
    RunAnalyzers                                ... 'true'
    EnableNETAnalyzers                          ... 'true'
    AnalysisLevel                               ... 'latest-recommended'
    AnalysisMode                                ... 'Recommended'
    CodeAnalysisTreatWarningsAsErrors           ... 'false'
    EnforceCodeStyleInBuild                     ... 'true'
    _SkipUpgradeNetAnalyzersNuGetWarning        ... 'false'
    AnalysisModeSecurity                        ... 'all'
    EnforceCodeStyleInBuild                     ... 'true'
    TargetFramework                             ... 'net8.0'
    GenerateAssemblyInfo                        ... 'false'
    GenerateAssemblyInfoWithT4                  ... 'false'
    ApplicationIcon                             ... 
    AllowUnsafeBlocks                           ... 'false'
    OutputType                                  ... 'Library' by default, 'Exe' if benchmark project
    Configurations                              ... 'Release;Debug;CodeAnalysis;PushNuGetPackage' or 'Release' if benchmark project
    SkipInvalidConfigurations                   ... 'true'
    ErrorReport                                 ... 'prompt'
    AssemblyName                                ... the name of the final output assembly after the project is built
    ConfigurationName                           ... the configuration for the build
    Platforms                                   ... 'AnyCPU;x64;x86'
    PlatformName                                ... the platform
    RootNamespace                               ... the root namespace for the project: '$(MSBuildProjectName.Replace(" ", "_"))'
    SetDefaultCompanyRootNamespace              ... used to set RootNamespace. The root namespace to use when you name an embedded resource
    SetDefaultRootNamespace                     ... 
    GeneratePackageOnBuild                      ... 'false' To automatically run dotnet pack set it to 'true'
    NoWarn                                      ... ignore this warning specified
    IncludeGlobalAssemblyInfo                   ... 'true' to set a global assembyl info file, to fullfill all basic company needs
    TransformOnBuild                            ... 'false' Run the Transform task at the start of every build
    RestoreProjectStyle                         ... If you have no packages installed in a project (no PackageReferences in project file and no packages.config file),
                                                    but want the project to be restored as PackageReference style,
                                                    you can set a Project property RestoreProjectStyle to PackageReference in your project file.
    MicrosoftSharedPublicKey                    ... the specified public key
    MicrosoftPublicKey                          ... the specified public key
    MicrosoftAspNetCorePublicKey                ... the specified public key
    ECMAPublicKey                               ... the specified public key
    OpenPublicKey                               ... the specified public key
    SilverlightPlatformPublicKey                ... the specified public key
***********************************************************************************************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup Label="Imported">
        <IsLanguagePropsFileImported>true</IsLanguagePropsFileImported>
    </PropertyGroup>

    <PropertyGroup Label="Language Settings">
        <SyntonyDefaultTargetFramework>net8.0</SyntonyDefaultTargetFramework>
        <!--
            The compiler determines a default based on these rules:
            Target framework    version     C# language version default
            .NET                8.x         C# 12.0
            .NET                7.x         C# 11.0
            .NET                6.x         C# 10.0
            .NET                5.x         C#  9.0
            .NET Core           3.x         C#  8.0
            .NET Core           2.x         C#  7.3
            .NET Standard       2.1         C#  8.0
            .NET Standard       2.0         C#  7.3
            .NET Standard       1.x         C#  7.3
            .NET Framework      all         C#  7.3
            https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/configure-language-version
      
            With the release of C# 8.0, support for nullable reference types has been added to the language. 
            Futhermore, .NET Core 3.0 added new nullable attributes like the AllowNullAttribute which are sometimes required to exactly declare when and how null is allowed in specific code sections.
            Unfortunately, these attributes are not available in older target frameworks like .NET Standard 2.0 which makes annotating existing code harder.

            The compiler accepts syntax from the latest released version of the compiler (including minor version). 
            https://www.meziantou.net/csharp-8-nullable-reference-types.htm
            https://learn.microsoft.com/en-us/dotnet/csharp/nullable-references#nullable-contexts
            https://learn.microsoft.com/en-us/dotnet/csharp/tutorials/upgrade-to-nullable-references
        -->

        <!-- 
            https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#enablepreviewfeatures 
            When a project contains this property set to True, the following assembly-level attribute is added to the AssemblyInfo.cs file:
            [assembly: RequiresPreviewFeatures]
        -->
        <EnablePreviewFeatures>true</EnablePreviewFeatures>

        <!-- 
            https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/configure-language-version#c-language-version-reference
            default or latestMajor: The compiler accepts syntax from the latest released major version of the compiler.
            preview: The compiler accepts all valid language syntax from the latest preview version. -->
        <LangVersion>latestMajor</LangVersion>

        <!-- https://learn.microsoft.com/en-us/dotnet/csharp/nullable-references#nullable-contexts enable: The compiler enables all null reference analysis and all language features -->
        <Nullable>enable</Nullable>
        
        <!-- The ImplicitUsings property can be used to enable and disable implicit global using directives in C# projects that target .NET 6 or a later version and C# 10 or a later version. 
             When the feature is enabled, the .NET SDK adds global using directives for a set of default namespaces based on the type of project SDK.
             Set this property to true or enable to enable implicit global using directives. To disable implicit global using directives, remove the property or set it to false or disable.
             https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#implicitusings
             We don't use implicit global using directives
        -->
        <ImplicitUsings>false</ImplicitUsings>
        
        <!-- Causes the compiler to produce an assembly whose byte-for-byte output is identical across compilations for identical inputs. 
             https://learn.microsoft.com/en-us/visualstudio/msbuild/customize-by-directory?view=vs-2022#directorybuildprops-example 
             https://learn.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-properties?view=vs-2022
             https://github.com/clairernovotny/DeterministicBuilds     
        -->
        <Deterministic>true</Deterministic>
        
        <!-- Resource naming https://learn.microsoft.com/en-us/dotnet/core/resources/manifest-file-names#embeddedresourceusedependentuponconvention-property -->
        <EmbeddedResourceUseDependentUponConvention>false</EmbeddedResourceUseDependentUponConvention>

        <!--
            generating binding redirects 
            (1) If there are no binding conflicts then the *.config file is not generated.
            (2) If there are binding conflicts then the *.config file is generated.
        -->
        <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
        <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>
    </PropertyGroup>

    <PropertyGroup Label="Analyzers">
        <!--
            How to enable / disable source code analysis for managed code
            https://learn.microsoft.com/en-us/visualstudio/code-quality/disable-code-analysis?view=vs-2019 
        -->
        <!-- Controls whether NuGet-based analyzers run at build time. Default: true -->
        <RunAnalyzersDuringBuild>true</RunAnalyzersDuringBuild>
        
        <!-- Controls whether NuGet-based analyzers analyze code live at design time. Default: true -->
        <RunAnalyzersDuringLiveAnalysis>true</RunAnalyzersDuringLiveAnalysis>
        
        <!-- Disables NuGet-based analyzers at both build AND design time. This property takes precedence over RunAnalyzersDuringBuild AND RunAnalyzersDuringLiveAnalysis. Default: true -->
        <RunAnalyzers>true</RunAnalyzers>
        <!-- 
            https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/overview?tabs=net-8
            https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#code-analysis-properties
            https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#analysismode
            https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#analysismodecategory
        -->
        <EnableNETAnalyzers>true</EnableNETAnalyzers>
        <AnalysisLevel>latest-recommended</AnalysisLevel>
        <AnalysisMode>Recommended</AnalysisMode>
        <CodeAnalysisTreatWarningsAsErrors>false</CodeAnalysisTreatWarningsAsErrors>
        <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
        <_SkipUpgradeNetAnalyzersNuGetWarning>false</_SkipUpgradeNetAnalyzersNuGetWarning>
        <AnalysisModeSecurity>all</AnalysisModeSecurity>
        <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
    </PropertyGroup>

    <PropertyGroup Label="Enable Analyzers based on EffectiveAnalysisLevel"  Condition="'$(EffectiveAnalysisLevel)' != '' And $([MSBuild]::VersionGreaterThanOrEquals($(EffectiveAnalysisLevel), '5.0'))">
        <!-- 
            NET code quality analysis is enabled, by default, for projects that target .NET 5 or a later version.
            https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#enablenetanalyzers  
            https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#enforcecodestyleinbuild
        -->
        <EnableNETAnalyzers>true</EnableNETAnalyzers>
        <_SkipUpgradeNetAnalyzersNuGetWarning>true</_SkipUpgradeNetAnalyzersNuGetWarning>
    </PropertyGroup>

    <PropertyGroup Label="Compile settings">
        <!--
             The full set of .NET 8 TFMs, including operating-specific ones follows.
                 net8.0
                 net8.0-browser
                 net8.0-android
                 net8.0-ios
                 net8.0-maccatalyst
                 net8.0-macos
                 net8.0-tvos
                 net8.0-windows
        -->
        <TargetFramework>$(SyntonyDefaultTargetFramework)</TargetFramework>
        
        <!-- Controls AssemblyInfo attribute generation for the project. The default value is true. We set it to false, because we create our own one except for benchmark tests -->
        <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
        <GenerateAssemblyInfoWithT4>false</GenerateAssemblyInfoWithT4>

        <!-- The .ico icon file to pass to the compiler for embedding as a Win32 icon. The property is equivalent to the /win32icon compiler switch. -->
        <_CommonIcon Condition="Exists('Properties\$(MSBuildProjectName).ico')">Properties\$(MSBuildProjectName).ico</_CommonIcon>
        <_CommonIcon Condition="'$(CommonIcon)' == '' AND Exists('Properties\$(Company).ico')">Properties\$(Company).ico</_CommonIcon>
        <_CommonIcon Condition="'$(CommonIcon)' == '' AND Exists('Properties\Icon.ico')">Properties\Icon.ico</_CommonIcon>
        <ApplicationIcon>$(_CommonIcon)</ApplicationIcon>

        <!-- The AllowUnsafeBlocks compiler option allows code that uses the unsafe keyword to compile. The default value for this option is false, meaning unsafe code is not allowed. -->
        <AllowUnsafeBlocks>false</AllowUnsafeBlocks>

        <!-- Specifies the file format of the output file. This parameter can have one of the following values:
             - Library. Creates a code library. (Default value.)
             - Exe. Creates a console application.
             - Module. Creates a module.
             - Winexe. Creates a Windows-based program.
        -->
        <OutputType>Library</OutputType>
        <OutputType Condition="'$(IsBenchmarkProject)' == 'true' OR '$(IsExampleProject)' == 'true'">Exe</OutputType>

        <SkipInvalidConfigurations>true</SkipInvalidConfigurations>

        <Configurations>Release;Debug;CodeAnalysis;PushNuGetPackage</Configurations>

        <Configurations Condition="'$(IsBenchmarkProject)' == 'true'">Release</Configurations>
    </PropertyGroup>

    <PropertyGroup Label="Other project properties">
        <!-- 
            https://learn.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-properties?view=vs-2022 
            C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\amd64\Microsoft.Common.CurrentVersion.targets
            Specifies how the compiler task should report internal compiler errors. Valid values are "prompt," "send," or "none." This property is equivalent to the /errorreport compiler switch. 
        -->
        <ErrorReport>prompt</ErrorReport>

        <!-- The name of the final output assembly after the project is built. -->
        <AssemblyName Condition="'$(AssemblyName)' == ''">$(MSBuildProjectName)</AssemblyName>
        
        <Configuration Condition="'$(IsBenchmarkProject)' == 'true' OR '$(IsQuickBenchmarkProject)' == 'true'">Release</Configuration>
        <ConfigurationName Condition="'$(ConfigurationName)' == ''">$(Configuration)</ConfigurationName>

        <Platforms Condition="'$(Platforms)' == ''">AnyCPU;x64;x86</Platforms>
        <Platforms Condition="'$(Platform)' == ''">AnyCPU</Platforms>
        <PlatformName Condition="'$(PlatformName)' == ''">$(Platform)</PlatformName>
        
        <!-- 
            https://learn.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli#automatically-generate-package-on-build 
            To automatically run dotnet pack whenever you run dotnet build set to 'true'.
        -->
        <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
    </PropertyGroup>

    <PropertyGroup Label ="RootNamespace">
        <_DefaultRootNamespace Condition="'$(RootNamespace)' == '' ">$(MSBuildProjectName.Replace(" ", "_").Replace("-", "_"))</_DefaultRootNamespace>
        <!-- Used to set RootNamespace. The root namespace to use when you name an embedded resource. This namespace is part of the embedded resource manifest name. -->
        <SetDefaultCompanyRootNamespace Condition="'$(SetDefaultCompanyRootNamespace)' == ''">true</SetDefaultCompanyRootNamespace>
        <SetDefaultRootNamespace Condition="'$(SetDefaultRootNamespace)' == ''">$(SetDefaultCompanyRootNamespace)</SetDefaultRootNamespace>
    </PropertyGroup>
    
    <PropertyGroup Condition="'$(IsSyntonyFrameworkProject)' == 'true'">
        <RootNamespace>$(Company)</RootNamespace>
    </PropertyGroup>

    <PropertyGroup Condition="'$(IsSyntonyTestProject)' == 'true'">
        <RootNamespace Condition="$(AssemblyName.Contains('.Tests'))">$(Company).Tests</RootNamespace>
        <RootNamespace Condition="$(AssemblyName.Contains('.UnitTests'))">$(Company).UnitTests</RootNamespace>
        <RootNamespace Condition="$(AssemblyName.Contains('.PerformanceTests'))">$(Company).PerformanceTests</RootNamespace>
        <RootNamespace Condition="$(AssemblyName.Contains('.SecurityTests'))">$(Company).SecurityTests</RootNamespace>
        <RootNamespace Condition="$(AssemblyName.Contains('.IntegrationTests'))">$(Company).IntegrationTests</RootNamespace>
        <RootNamespace Condition="$(AssemblyName.Contains('.BenchmarkTests'))">$(Company).BenchmarkTests</RootNamespace>
        <RootNamespace Condition="$(AssemblyName.Contains('.QuickBenchmarkTests'))">$(Company).QuickBenchmarkTests</RootNamespace>
    </PropertyGroup>
    <PropertyGroup Condition="'$(IsSyntonyTestProject)' != 'true'">
        <RootNamespace Condition="'$(IsTrialAndErrorConsole)' == 'true' OR '$(IsNotCompileProject)' == 'true'">$(_DefaultRootNamespace)</RootNamespace>
    </PropertyGroup>

    <PropertyGroup Label="NoWarn">
        <!--
            IDE0018     ... https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0018 (Inline variable declaration)
            IDE0034     ... https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0034 (Simplify 'default' expression)
            IDE0079     ... https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0079 (Remove unnecessary suppression )
            IDE0290     ... https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0290 (Use primary constructor)
            CA1031      ... https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1031 (Do not catch general exception types)
            NU1603      ... https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu1603 (A package dependency specified a version that could not be found.)
            MA0048      ... https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0048.md (File name must match type name) ... because partial classes have different names
            AD0001      ... 
            MSB3491     ... https://learn.microsoft.com/en-us/visualstudio/msbuild/errors/msb3491?view=vs-2022
            MSB3501     ... 
        -->
        <_CompanyNoWarn>IDE0018;IDE0034;IDE0079;IDE0290;CA1031;NU1603;MA0048;AD0001</_CompanyNoWarn>
        <NoWarn Condition="'$(NoWarn)' != ''">$(NoWarn);$(_CompanyNoWarn)</NoWarn>
        <NoWarn Condition="'$(NoWarn)' == ''">$(_CompanyNoWarn)</NoWarn>
        <_CompanyMSBuildWarningsAsMessages>MSB3491;MSB3501;MSB3952</_CompanyMSBuildWarningsAsMessages>
        <MSBuildWarningsAsMessages Condition="'$(MSBuildWarningsAsMessages)' != ''">$(MSBuildWarningsAsMessages);$(_CompanyMSBuildWarningsAsMessages)</MSBuildWarningsAsMessages>
        <MSBuildWarningsAsMessages Condition="'$(MSBuildWarningsAsMessages)' == ''">$(_CompanyMSBuildWarningsAsMessages)</MSBuildWarningsAsMessages>
    </PropertyGroup>

    <!-- START properties -->
    <PropertyGroup>
        <!-- Include a common GlobalAssemblyInfo.cs by default -->
        <IncludeGlobalAssemblyInfo>true</IncludeGlobalAssemblyInfo>

        <!-- Include a common AssemblyInfo.cs by default -->
        <IncludeSyntonyAssemblyInfo>true</IncludeSyntonyAssemblyInfo>
        <!-- Include a InternalsVisibleTo.AssemblyInfo.cs by default -->
        <IncludeInternalsVisibleToSyntonyAssemblyInfo>true</IncludeInternalsVisibleToSyntonyAssemblyInfo>

        <!-- for updating Target GenerateProperties -->
        <_PropertiesUpdated>false</_PropertiesUpdated>
        <!-- Rebuilds all tt / T4 files on every build if TransformOnBuild is true.  -->
        <TransformOnBuild>false</TransformOnBuild>
        <!-- Using PackageReference for a project with no PackageReferences https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#using-packagereference-for-a-project-with-no-packagereferences -->
        <RestoreProjectStyle>PackageReference</RestoreProjectStyle>
    </PropertyGroup>

    <PropertyGroup Label="Common PublicKeys">
        <MicrosoftSharedPublicKey>0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9</MicrosoftSharedPublicKey>
        <MicrosoftPublicKey>002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293</MicrosoftPublicKey>
        <MicrosoftAspNetCorePublicKey>0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb</MicrosoftAspNetCorePublicKey>
        <ECMAPublicKey>00000000000000000400000000000000</ECMAPublicKey>
        <OpenPublicKey>00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb</OpenPublicKey>
        <SilverlightPlatformPublicKey>00240000048000009400000006020000002400005253413100040000010001008d56c76f9e8649383049f383c44be0ec204181822a6c31cf5eb7ef486944d032188ea1d3920763712ccb12d75fb77e9811149e6148e5d32fbaab37611c1878ddc19e20ef135d0cb2cff2bfec3d115810c3d9069638fe4be215dbf795861920e5ab6f7db2e2ceef136ac23d5dd2bf031700aec232f6c6b1c785b4305c123b37ab</SilverlightPlatformPublicKey>
    </PropertyGroup>
</Project>
